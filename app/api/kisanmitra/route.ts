import { OpenAI } from 'openai';
import { NextRequest, NextResponse } from 'next/server';
import { z } from 'zod';

// Environment variables validation
const envSchema = z.object({
  OPENAI_API_KEY: z.string().min(1, 'OpenAI API key is required'),
  MAX_REQUESTS_PER_MINUTE: z.string().default('10'),
  ALLOWED_ORIGINS: z.string().default('*'),
});

const env = envSchema.parse(process.env);

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: env.OPENAI_API_KEY,
});

// Rate limiting store (in production, use Redis)
const rateLimitStore = new Map<string, { count: number; resetTime: number }>();

// Request validation schema
const requestSchema = z.object({
  message: z.string().min(1).max(1000),
  language: z.enum(['en', 'mr', 'hi', 'bn', 'te', 'ta', 'gu', 'kn']).default('en'),
  context: z.object({
    location: z.string().optional(),
    cropType: z.string().optional(),
    season: z.string().optional(),
  }).optional(),
});

// Security middleware
function validateRequest(req: NextRequest) {
  const origin = req.headers.get('origin');
  const userAgent = req.headers.get('user-agent');
  
  // Basic security checks
  if (!userAgent || userAgent.includes('curl') || userAgent.includes('Postman')) {
    return { valid: false, error: 'Invalid user agent' };
  }
  
  // Rate limiting
  const clientIP = req.headers.get('x-forwarded-for') || req.ip || 'unknown';
  const now = Date.now();
  const clientData = rateLimitStore.get(clientIP);
  
  if (clientData && now < clientData.resetTime) {
    if (clientData.count >= parseInt(env.MAX_REQUESTS_PER_MINUTE)) {
      return { valid: false, error: 'Rate limit exceeded' };
    }
    clientData.count++;
  } else {
    rateLimitStore.set(clientIP, { count: 1, resetTime: now + 60000 });
  }
  
  return { valid: true, clientIP };
}

// Clean rate limit store periodically
setInterval(() => {
  const now = Date.now();
  for (const [key, value] of rateLimitStore.entries()) {
    if (now > value.resetTime) {
      rateLimitStore.delete(key);
    }
  }
}, 60000);

// Enhanced system prompts for different languages
const systemPrompts = {
  en: `You are KisanMitra, an expert AI agricultural advisor for Indian farmers. Provide concise, practical farming advice.

CORE CAPABILITIES:
ЁЯМ▒ Crop Management: Selection, planting, care, harvesting
ЁЯТ░ Market Intelligence: Prices, trends, demand-supply
ЁЯМжя╕П Weather & Climate: Forecasts, seasonal planning
ЁЯМ┐ Pest Control: IPM, organic solutions, prevention
ЁЯМН Soil Health: Testing, fertility, sustainable practices
ЁЯЪЬ Technology: Modern techniques, equipment, precision farming
ЁЯПЫя╕П Government Support: Schemes, subsidies, loans
ЁЯУК Financial Planning: Cost analysis, profit optimization

RESPONSE RULES:
- Keep responses SHORT (max 3 paragraphs)
- Use simple, clear language
- Provide actionable advice
- Show prices in тВ╣ (Rupees)
- Use Indian measurements (quintal, hectare)
- NEVER add disclaimers or "incomplete information" notes
- Be confident and direct
- Focus on practical solutions

MISSION: Help Indian farmers increase yields, reduce costs, and build profitable farms.`,

  mr: `рддреБрдореНрд╣реА рдХрд┐рд╕рд╛рдирдорд┐рддреНрд░ рдЖрд╣рд╛рдд, рднрд╛рд░рддреАрдп рд╢реЗрддрдХрд▒реНрдпрд╛рдВрд╕рд╛рдареА рддрдЬреНрдЮ AI рдХреГрд╖реА рд╕рд▓реНрд▓рд╛рдЧрд╛рд░. рд╕рдВрдХреНрд╖рд┐рдкреНрдд, рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рд╢реЗрддреА рд╕рд▓реНрд▓рд╛ рджреНрдпрд╛.

рдореБрдЦреНрдп рдХреНрд╖рдорддрд╛:
ЁЯМ▒ рдкреАрдХ рд╡реНрдпрд╡рд╕реНрдерд╛рдкрди: рдирд┐рд╡рдб, рд▓рд╛рдЧрд╡рдб, рдХрд╛рд│рдЬреА, рдХрд╛рдкрдгреА
ЁЯТ░ рдмрд╛рдЬрд╛рд░ рдорд╛рд╣рд┐рддреА: рдХрд┐рдВрдорддреА, рдЯреНрд░реЗрдВрдб, рдорд╛рдЧрдгреА-рдкреБрд░рд╡рдард╛
ЁЯМжя╕П рд╣рд╡рд╛рдорд╛рди: рдЕрдВрджрд╛рдЬ, рдЛрддреБрдорд╛рди рдирд┐рдпреЛрдЬрди
ЁЯМ┐ рдХреАрдб рдирд┐рдпрдВрддреНрд░рдг: рдПрдХрд╛рддреНрдорд┐рдХ рд╡реНрдпрд╡рд╕реНрдерд╛рдкрди, рд╕реЗрдВрджреНрд░рд┐рдп рдЙрдкрд╛рдп
ЁЯМН рдорд╛рддреА рдЖрд░реЛрдЧреНрдп: рдЪрд╛рдЪрдгреА, рд╕реЗрдВрджреНрд░рд┐рдп рд╢реЗрддреА
ЁЯЪЬ рддрдВрддреНрд░рдЬреНрдЮрд╛рди: рдЖрдзреБрдирд┐рдХ рддрдВрддреНрд░реЗ, рдЙрдкрдХрд░рдгреЗ
ЁЯПЫя╕П рд╕рд░рдХрд╛рд░реА рд╕рд╣рд╛рдпреНрдп: рдпреЛрдЬрдирд╛, рд╕рдмреНрд╕рд┐рдбреА, рдХрд░реНрдЬ
ЁЯУК рдЖрд░реНрдерд┐рдХ рдирд┐рдпреЛрдЬрди: рдЦрд░реНрдЪ рд╡рд┐рд╢реНрд▓реЗрд╖рдг, рдирдлрд╛

рдкреНрд░рддрд┐рд╕рд╛рдж рдирд┐рдпрдо:
- рдкреНрд░рддрд┐рд╕рд╛рдж рд▓рд╣рд╛рди рдареЗрд╡рд╛ (рдЬрд╛рд╕реНрддреАрдд рдЬрд╛рд╕реНрдд 3 рдкрд░рд┐рдЪреНрдЫреЗрдж)
- рд╕реЛрдкреА, рд╕реНрдкрд╖реНрдЯ рднрд╛рд╖рд╛ рд╡рд╛рдкрд░рд╛
- рдХрд╛рд░реНрдпрд╛рдиреНрд╡рд┐рдд рд╕рд▓реНрд▓рд╛ рджреНрдпрд╛
- рдХрд┐рдВрдорддреА тВ╣ рдордзреНрдпреЗ рджрд╛рдЦрд╡рд╛
- рднрд╛рд░рддреАрдп рдорд╛рдкреЗ рд╡рд╛рдкрд░рд╛
- рдХрдзреАрд╣реА рдЕрд╕реНрд╡реАрдХрд░рдг рдЬреЛрдбреВ рдирдХрд╛
- рдЖрддреНрдорд╡рд┐рд╢реНрд╡рд╛рд╕рдкреВрд░реНрдг рдЖрдгрд┐ рдереЗрдЯ рд╡реНрд╣рд╛`,

  hi: `рдЖрдк рдХрд┐рд╕рд╛рдирдорд┐рддреНрд░ рд╣реИрдВ, рднрд╛рд░рддреАрдп рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЗ рд▓рд┐рдП рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ AI рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣рдХрд╛рд░ред рд╕рдВрдХреНрд╖рд┐рдкреНрдд, рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рдЦреЗрддреА рд╕рд▓рд╛рд╣ рджреЗрдВред

рдореБрдЦреНрдп рдХреНрд╖рдорддрд╛рдПрдВ:
ЁЯМ▒ рдлрд╕рд▓ рдкреНрд░рдмрдВрдзрди: рдЪрдпрди, рд░реЛрдкрдг, рджреЗрдЦрднрд╛рд▓, рдХрдЯрд╛рдИ
ЁЯТ░ рдмрд╛рдЬрд╛рд░ рдмреБрджреНрдзрд┐рдорддреНрддрд╛: рдХреАрдорддреЗрдВ, рд░реБрдЭрд╛рди, рдорд╛рдВрдЧ-рдЖрдкреВрд░реНрддрд┐
ЁЯМжя╕П рдореМрд╕рдо: рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди, рдореМрд╕рдореА рдпреЛрдЬрдирд╛
ЁЯМ┐ рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг: рдПрдХреАрдХреГрдд рдкреНрд░рдмрдВрдзрди, рдЬреИрд╡рд┐рдХ рд╕рдорд╛рдзрд╛рди
ЁЯМН рдорд┐рдЯреНрдЯреА рд╕реНрд╡рд╛рд╕реНрдереНрдп: рдкрд░реАрдХреНрд╖рдг, рдЙрд░реНрд╡рд░рддрд╛, рд╕реНрдерд╛рдпреА рдкреНрд░рдерд╛рдПрдВ
ЁЯЪЬ рдкреНрд░реМрджреНрдпреЛрдЧрд┐рдХреА: рдЖрдзреБрдирд┐рдХ рддрдХрдиреАрдХ, рдЙрдкрдХрд░рдг
ЁЯПЫя╕П рд╕рд░рдХрд╛рд░реА рд╕рд╣рд╛рдпрддрд╛: рдпреЛрдЬрдирд╛рдПрдВ, рд╕рдмреНрд╕рд┐рдбреА, рдЛрдг
ЁЯУК рд╡рд┐рддреНрддреАрдп рдпреЛрдЬрдирд╛: рд▓рд╛рдЧрдд рд╡рд┐рд╢реНрд▓реЗрд╖рдг, рд▓рд╛рдн рдЕрдиреБрдХреВрд▓рди

рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рдирд┐рдпрдо:
- рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛рдУрдВ рдХреЛ рдЫреЛрдЯрд╛ рд░рдЦреЗрдВ (рдЕрдзрд┐рдХрддрдо 3 рдкреИрд░рд╛рдЧреНрд░рд╛рдл)
- рд╕рд░рд▓, рд╕реНрдкрд╖реНрдЯ рднрд╛рд╖рд╛ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
- рдХрд╛рд░реНрд░рд╡рд╛рдИ рдпреЛрдЧреНрдп рд╕рд▓рд╛рд╣ рджреЗрдВ
- рдХреАрдорддреЛрдВ рдХреЛ тВ╣ рдореЗрдВ рджрд┐рдЦрд╛рдПрдВ
- рднрд╛рд░рддреАрдп рдорд╛рдк рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
- рдХрднреА рднреА рдЕрд╕реНрд╡реАрдХрд░рдг рди рдЬреЛрдбрд╝реЗрдВ
- рдЖрддреНрдорд╡рд┐рд╢реНрд╡рд╛рд╕рдкреВрд░реНрдг рдФрд░ рд╕реАрдзреЗ рд░рд╣реЗрдВ`,

  bn: `ржЖржкржирж┐ ржХрж┐рж╖рж╛ржиржорж┐рждрзНрж░, ржнрж╛рж░рждрзАржпрж╝ ржХрзГрж╖ржХржжрзЗрж░ ржЬржирзНржп ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ AI ржХрзГрж╖рж┐ ржкрж░рж╛ржорж░рзНрж╢ржжрж╛рждрж╛ред рж╕ржВржХрзНрж╖рж┐ржкрзНржд, ржмрзНржпржмрж╣рж╛рж░рж┐ржХ ржХрзГрж╖рж┐ ржкрж░рж╛ржорж░рзНрж╢ ржжрж┐ржиред`,
  te: `р░ор▒Ар░░р▒Б р░Хр░┐р░╕р░╛р░ир▒Нр░ор░┐р░др▒Нр░░, р░нр░╛р░░р░др▒Ар░п р░░р▒Ир░др▒Бр░▓ р░Хр▒Лр░╕р░В р░ир░┐р░кр▒Бр░г AI р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р░▓р░╣р░╛р░жр░╛р░░р▒Б. р░╕р░Вр░Хр▒Нр░╖р░┐р░кр▒Нр░д, р░Жр░Ър░░р░гр░╛р░др▒Нр░ор░Х р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р░▓р░╣р░╛ р░Зр░╡р▒Нр░╡р░Вр░бр░┐.`,
  ta: `роирпАроЩрпНроХро│рпН роХро┐роЪро╛ройрпНрооро┐родрпНро░, роЗроирпНродро┐роп ро╡ро┐ро╡роЪро╛ропро┐роХро│рпБроХрпНроХро╛рой роиро┐рокрпБрогродрпНродрпБро╡ AI ро╡рпЗро│ро╛рогрпН роЖро▓рпЛроЪроХро░рпН. роЪрпБро░рпБроХрпНроХрооро╛рой, роироЯрпИроорпБро▒рпИ ро╡рпЗро│ро╛рогрпН роЖро▓рпЛроЪройрпИропрпИ ро╡ро┤роЩрпНроХрпБроЩрпНроХро│рпН.`,
  gu: `ркдркорлЗ ркХрк┐рк╕рк╛ркиркорк┐ркдрлНрк░ ркЫрлЛ, ркнрк╛рк░ркдрлАркп ркЦрлЗркбрлВркдрлЛ ркорк╛ркЯрлЗ ркирк┐рк╖рлНркгрк╛ркд AI ркХрлГрк╖рк┐ рк╕рк▓рк╛рк╣ркХрк╛рк░. рк╕ркВркХрлНрк╖рк┐рккрлНркд, рк╡рлНркпрк╡рк╣рк╛рк░рк┐ркХ ркХрлГрк╖рк┐ рк╕рк▓рк╛рк╣ ркЖрккрлЛ.`,
  kn: `р▓ир│Ар▓╡р│Б р▓Хр▓┐р▓╕р▓╛р▓ир│Нр▓ор▓┐р▓др│Нр▓░, р▓нр▓╛р▓░р▓др│Ар▓п р▓░р│Ир▓др▓░р▓┐р▓Чр│Ж р▓др▓Ьр│Нр▓Ю AI р▓Хр│Гр▓╖р▓┐ р▓╕р▓▓р▓╣р│Жр▓Чр▓╛р▓░. р▓╕р▓Вр▓Хр│Нр▓╖р▓┐р▓кр│Нр▓д, р▓кр│Нр▓░р▓╛р▓пр│Лр▓Чр▓┐р▓Х р▓Хр│Гр▓╖р▓┐ р▓╕р▓▓р▓╣р│Ж р▓ир│Ар▓бр▓┐.`,
};

export async function POST(req: NextRequest) {
  try {
    // Security validation
    const securityCheck = validateRequest(req);
    if (!securityCheck.valid) {
      return NextResponse.json(
        { error: securityCheck.error },
        { status: 429 }
      );
    }

    // Parse and validate request body
    const body = await req.json();
    const validatedData = requestSchema.parse(body);

    // Detect if user needs real-time market data
    const message = validatedData.message.toLowerCase();
    const needsRealTimeData = 
      message.includes('cotton') || 
      message.includes('рдХрд╛рдкреВрд╕') || 
      message.includes('рдХрдкрд╛рд╕') ||
      message.includes('market') || 
      message.includes('mandi') || 
      message.includes('bazaar') ||
      message.includes('price') ||
      message.includes('rate') ||
      message.includes('рдХреАрдордд') ||
      message.includes('рджрд░') ||
      message.includes('рдмрд╛рдЬрд╛рд░');

    // Enhanced prompt for real-time data
    let systemPrompt = systemPrompts[validatedData.language];
    
    if (needsRealTimeData) {
      systemPrompt += `

ЁЯФН REAL-TIME MARKET DATA MODE:
User is asking for current market information. Provide:
- Current crop prices and rates
- Market trends and changes
- Government policy updates
- Weather impact on prices
- Demand-supply situation

тЪая╕П CRITICAL: Keep response SHORT (max 2 paragraphs), NO disclaimers, give confident answers.`;
    }

    // Add context if provided
    if (validatedData.context) {
      const { location, cropType, season } = validatedData.context;
      if (location || cropType || season) {
        systemPrompt += `

ЁЯУН CONTEXT: ${location ? `Location: ${location}` : ''}${cropType ? ` | Crop: ${cropType}` : ''}${season ? ` | Season: ${season}` : ''}
Provide location-specific advice when possible.`;
      }
    }

    // Optimize OpenAI request
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini', // Fast and cost-effective
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: validatedData.message }
      ],
      max_tokens: needsRealTimeData ? 300 : 500, // Shorter for market data
      temperature: needsRealTimeData ? 0.1 : 0.7, // More factual for market data
      presence_penalty: 0.1, // Reduce repetition
      frequency_penalty: 0.1, // Reduce repetition
      top_p: 0.9, // Balanced creativity
    });

    const response = completion.choices[0]?.message?.content || 'Sorry, I could not generate a response.';

    // Log successful request (in production, use proper logging service)
    console.log(`KisanMitra API - Success: ${securityCheck.clientIP} - ${validatedData.language}`);

    return NextResponse.json({
      success: true,
      data: {
        response,
        language: validatedData.language,
        dataType: needsRealTimeData ? 'real-time-market' : 'general-advice',
        timestamp: new Date().toISOString(),
        context: validatedData.context || null,
      },
      usage: {
        prompt_tokens: completion.usage?.prompt_tokens,
        completion_tokens: completion.usage?.completion_tokens,
        total_tokens: completion.usage?.total_tokens,
      }
    });

  } catch (error) {
    console.error('KisanMitra API Error:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Invalid request data', details: error.errors },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// Health check endpoint
export async function GET() {
  return NextResponse.json({
    status: 'healthy',
    service: 'KisanMitra API',
    timestamp: new Date().toISOString(),
    version: '1.0.0'
  });
} 